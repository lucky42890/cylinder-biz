[{"D:\\Jobs\\Grid_Singularity\\cylinder-viz\\src\\App.js":"1","D:\\Jobs\\Grid_Singularity\\cylinder-viz\\src\\reportWebVitals.js":"2","D:\\Jobs\\Grid_Singularity\\cylinder-viz\\src\\pages\\Cylinder\\index.js":"3"},{"size":248,"mtime":1609061617033,"results":"4","hashOfConfig":"5"},{"size":362,"mtime":1608952052372,"results":"6","hashOfConfig":"5"},{"size":4335,"mtime":1609081438631,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1kq0r7v",{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"12","messages":"13","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},"D:\\Jobs\\Grid_Singularity\\cylinder-viz\\src\\App.js",[],"D:\\Jobs\\Grid_Singularity\\cylinder-viz\\src\\reportWebVitals.js",[],"D:\\Jobs\\Grid_Singularity\\cylinder-viz\\src\\pages\\Cylinder\\index.js",["15","16","17","18"],"import React, { useEffect, useRef, useState } from \"react\";\r\nimport * as THREE from \"three\";\r\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\r\n\r\nconst DEFAULT_CYLINDER_NUM = 20;\r\nconst DEFAULT_ROUND_COLOR_NUM = 20;\r\n\r\nconst Cylinder = () => {\r\n\r\n  const glContainer = useRef(null);\r\n\r\n  const [roundColorNum, setRoundColorNum] = useState(DEFAULT_ROUND_COLOR_NUM);\r\n  const [numberOfCylinders, setNumberOfCylinders] = useState(DEFAULT_CYLINDER_NUM);\r\n\r\n  let scene;\r\n  let camera;\r\n  let renderer;\r\n  let controls;\r\n\r\n  useEffect(() => {\r\n\r\n    if (glContainer) {\r\n      scene = new THREE.Scene();\r\n      scene.background = new THREE.Color( 0x000000 );\r\n      scene.fog = new THREE.FogExp2( 0xcccccc, 0.002 );\r\n\r\n      renderer = new THREE.WebGLRenderer( { antialias: true } );\r\n      renderer.setPixelRatio( window.devicePixelRatio );\r\n      renderer.setSize( window.innerWidth, window.innerHeight );\r\n      glContainer.current.innerHTML = \"\";\r\n      glContainer.current.appendChild( renderer.domElement );\r\n\r\n      camera = new THREE.PerspectiveCamera( 60, window.innerWidth / window.innerHeight, 1, 1000 );\r\n      camera.position.set( 400, 200, 100 );\r\n\r\n      // controls\r\n      controls = new OrbitControls( camera, renderer.domElement );\r\n\r\n      controls.enableDamping = true;\r\n      controls.dampingFactor = 0.05;\r\n\r\n      controls.screenSpacePanning = false;\r\n\r\n      controls.minDistance = 100;\r\n      controls.maxDistance = 500;\r\n\r\n      controls.maxPolarAngle = Math.PI / 2;\r\n\r\n      // Calc ideal length of square contains all cylinders\r\n      const idealLength = Math.ceil(Math.sqrt(numberOfCylinders));\r\n      let zFloor = 0;\r\n\r\n      for (let i = 0; i < numberOfCylinders; i++) {\r\n        if (i % idealLength === 0 && i !== 0) {\r\n          zFloor++;\r\n        }\r\n\r\n        const height = Math.random() * 200 - 100;\r\n        const geometry = new THREE.CylinderBufferGeometry( 10, 10, Math.abs(height), 32, 1, false );\r\n        const material = new THREE.MeshPhongMaterial( { color: 0xffffff, flatShading: true } );\r\n        const mesh = new THREE.Mesh( geometry, material );\r\n        mesh.position.x = (i % idealLength) * 30 + Math.random() * 15;\r\n        mesh.position.y = height / 2;\r\n        mesh.position.z = zFloor * 30;\r\n        mesh.updateMatrix();\r\n        mesh.matrixAutoUpdate = false;\r\n        scene.add( mesh );\r\n      }\r\n\r\n      // Plane\r\n      // const geometry = new THREE.PlaneGeometry( 500, 500, 32 );\r\n      // const material = new THREE.MeshBasicMaterial( {color: 0xff0000, side: THREE.DoubleSide} );\r\n      // const plane = new THREE.Mesh( geometry, material );\r\n      // plane.rotateX(Math.PI / 2);\r\n      // scene.add( plane );\r\n\r\n      // lights\r\n      const dirLight1 = new THREE.DirectionalLight( 0xffffff );\r\n      dirLight1.position.set( 1, 1, 1 );\r\n      scene.add( dirLight1 );\r\n\r\n      const dirLight2 = new THREE.DirectionalLight( 0x002288 );\r\n      dirLight2.position.set( - 1, - 1, - 1 );\r\n      scene.add( dirLight2 );\r\n\r\n      const ambientLight = new THREE.AmbientLight( 0x222222 );\r\n      scene.add( ambientLight );\r\n      \r\n      const animate = () => {\r\n\t\t\t\trequestAnimationFrame( animate );\r\n\t\t\t\tcontrols.update();\r\n\t\t\t\trender();\r\n      }\r\n      \r\n      const render = () => {\r\n        renderer.render( scene, camera );\r\n      }\r\n\r\n      animate();\r\n    }\r\n\r\n  }, [glContainer, numberOfCylinders, roundColorNum])\r\n\r\n  const handleRoundColorChange = (e) => {\r\n    setRoundColorNum(e.target.value);\r\n  }\r\n\r\n  const handleCylinderNumChange = (e) => {\r\n    setNumberOfCylinders(e.target.value);\r\n  }\r\n\r\n  return (\r\n    <div className=\"cylinder\">\r\n      {/* Container of webgl */}\r\n      <div ref={glContainer} >\r\n      </div>\r\n\r\n      <div className=\"cylinder-setting\">\r\n        {/* Input color of circle round */}\r\n        <p>Color of Round</p>\r\n        <input  \r\n          type=\"number\"\r\n          min=\"-100\"\r\n          max=\"100\"\r\n          value={roundColorNum}\r\n          onChange={handleRoundColorChange}\r\n        />\r\n        <hr />\r\n\r\n        {/* Input number of cylinders */}\r\n        <p>Number of Cylinders</p>\r\n        <input\r\n          type=\"number\"\r\n          min=\"-100\"\r\n          max=\"100\"\r\n          value={numberOfCylinders}\r\n          onChange={handleCylinderNumChange}\r\n        />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Cylinder;",{"ruleId":"19","severity":1,"message":"20","line":23,"column":15,"nodeType":"21","endLine":23,"endColumn":32},{"ruleId":"19","severity":1,"message":"22","line":27,"column":18,"nodeType":"21","endLine":27,"endColumn":64},{"ruleId":"19","severity":1,"message":"23","line":33,"column":16,"nodeType":"21","endLine":33,"endColumn":98},{"ruleId":"19","severity":1,"message":"24","line":37,"column":18,"nodeType":"21","endLine":37,"endColumn":66},"react-hooks/exhaustive-deps","Assignments to the 'scene' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","NewExpression","Assignments to the 'renderer' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Assignments to the 'camera' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Assignments to the 'controls' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect."]